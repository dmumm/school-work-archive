/* IMAGES
users.png
drivers.png
cars.png
travels.png   */

-- #region Activity 1  --


/* IMAGES
users.png
drivers.png
cars.png
travels.png   */
DROP VIEW  IF EXISTS ACTIVE_DRIVERS;
DROP TABLE IF EXISTS MAINTENANCES;
DROP TABLE IF EXISTS ACTIVE_DRIVERS;
DROP TABLE IF EXISTS MAINTENANCE_TYPES;

-- task 1 --

CREATE TABLE MAINTENANCE_TYPES (

MAINTENANCE_TYPE_ID CHAR(5) PRIMARY KEY,
MAINTENANCE_TYPE_DESCRIPTION VARCHAR(30) NOT NULL

);

/*
DESCRIBE MAINTENANCE_TYPES
*/

-- task 2 --

CREATE TABLE MAINTENANCES (
    CAR_ID CHAR(5),
    MAINTENANCE_TYPE_ID CHAR(5),
    MAINTENANCE_DUE DATE,
    PRIMARY KEY (CAR_ID, MAINTENANCE_TYPE_ID, MAINTENANCE_DUE),
    FOREIGN KEY (CAR_ID) REFERENCES
        CARS(CAR_ID),
    FOREIGN KEY (MAINTENANCE_TYPE_ID) REFERENCES
        MAINTENANCE_TYPES(MAINTENANCE_TYPE_ID)
);


/*
DESCRIBE MAINTENANCES;
*/

-- task 3 --

CREATE TABLE ACTIVE_DRIVERS AS

    SELECT
        DRIVER_ID,
        DRIVER_FIRST_NAME,
        DRIVER_LAST_NAME,
        DRIVER_DRIVING_LICENSE_ID,
        DRIVER_DRIVING_LICENSE_CHECKED,
        DRIVER_RATING
    FROM DRIVERS
    WHERE DRIVER_RATING > 0;

ALTER TABLE ACTIVE_DRIVERS ADD PRIMARY KEY (DRIVER_ID);

/*
DESCRIBE ACTIVE_DRIVERS;
*/

-- task 4 --

ALTER TABLE ACTIVE_DRIVERS MODIFY DRIVER_FIRST_NAME VARCHAR(20);
ALTER TABLE ACTIVE_DRIVERS MODIFY DRIVER_LAST_NAME VARCHAR(20);
ALTER TABLE ACTIVE_DRIVERS MODIFY DRIVER_DRIVING_LICENSE_ID VARCHAR(10);

CREATE INDEX NameSearch
  ON ACTIVE_DRIVERS (
    DRIVER_FIRST_NAME,
    DRIVER_LAST_NAME,
    DRIVER_DRIVING_LICENSE_ID
  );

  -- task 5 --

ALTER TABLE ACTIVE_DRIVERS ADD CONSTRAINT DuplicateCheck UNIQUE (DRIVER_FIRST_NAME, DRIVER_LAST_NAME, DRIVER_DRIVING_LICENSE_ID);

-- task 6 --

ALTER TABLE MAINTENANCE_TYPES ADD MAINTENANCE_PRICE FLOAT;

-- #endregion Activity 1  --

-- #region Task 1 --

SELECT * FROM MAINTENANCE_TYPES WHERE MAINTENANCE_TYPE_ID = 2;
INSERT INTO MAINTENANCE_TYPES (MAINTENANCE_TYPE_ID, MAINTENANCE_TYPE_DESCRIPTION) VALUES (1, 'Some Description');
INSERT INTO MAINTENANCE_TYPES (MAINTENANCE_TYPE_ID, MAINTENANCE_TYPE_DESCRIPTION) VALUES (2, 'Some Description');


START TRANSACTION;

INSERT INTO MAINTENANCES (CAR_ID, MAINTENANCE_TYPE_ID, MAINTENANCE_DUE) VALUES (1001, 1, '2020-12-31');
INSERT INTO MAINTENANCES (CAR_ID, MAINTENANCE_TYPE_ID, MAINTENANCE_DUE) VALUES (1001, 2, '2020-06-01');
INSERT INTO MAINTENANCES (CAR_ID, MAINTENANCE_TYPE_ID, MAINTENANCE_DUE) VALUES (1003, 2, '2020-06-01');

COMMIT;

-- #endregion Task 1 --

-- #region Task 2 --

-- Disable autocommit
SET autocommit = 0;

-- Start the transaction
START TRANSACTION;

-- Insert the tire change maintenance task for every car
INSERT INTO MAINTENANCES (CAR_ID, MAINTENANCE_TYPE_ID, MAINTENANCE_DUE)
SELECT CAR_ID, 1 AS MAINTENANCE_TYPE_ID, '2020-09-01' AS MAINTENANCE_DUE
FROM CARS;

-- For demonstration purposes, we rollback the changes
ROLLBACK;

-- Re-enable autocommit
SET autocommit = 1;

-- #endregion Task 2 --

-- #region Task 3 --

DROP TABLE IF EXISTS ACTIVE_DRIVERS;

-- #endregion Task 3 --

-- #region Task 4 --

CREATE VIEW ACTIVE_DRIVERS AS
SELECT DISTINCT d.*
FROM DRIVERS d
JOIN TRAVELS t ON d.DRIVER_ID = t.DRIVER_ID;

-- #endregion Task 4 --

-- #region Task 5 --

UPDATE DRIVERS
SET DRIVER_DRIVING_LICENSE_ID = '1735488'
WHERE DRIVER_ID = 2003;

-- #endregion Task 5 --

-- #region Task 6 --

ALTER TABLE DRIVERS MODIFY DRIVER_ID INT AUTO_INCREMENT PRIMARY KEY;

INSERT INTO DRIVERS (
  DRIVER_FIRST_NAME,
  DRIVER_LAST_NAME,
  DRIVING_LICENSE_ID,
  DRIVER_START_DATE,
  DRIVER_DRIVING_LICENSE_CHECKED,
  DRIVER_RATING
) VALUES (
  'Nursin',
  'Yilmaz',
  4141447,
  '2019-12-28',
  TRUE,
  4.0
);


-- #endregion Task 6 --
